version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_NODE_API_URL=http://localhost:5000/api
      - NEXT_PUBLIC_PYTHON_API_URL=http://localhost:8000/api
    depends_on:
      - backend-node
      - backend-python
    networks:
      - agentic-network
    restart: unless-stopped

  backend-node:
    build:
      context: ./backend-node
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - FRONTEND_URL=http://localhost:3000
      - PYTHON_BACKEND_URL=http://backend-python:8000
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend-python:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - PORT=8000
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend-node
      - backend-python
    networks:
      - agentic-network
    restart: unless-stopped

networks:
  agentic-network:
    driver: bridge

volumes:
  node_modules_frontend:
  node_modules_backend: